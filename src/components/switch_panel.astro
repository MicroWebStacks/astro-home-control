---
export interface Props {
    name: string;
}

const { name } = Astro.props as Props;

const device_url = import.meta.env.SERVER+'/api/power/'+name
const init_state = await fetch(device_url).then((response) => response.json());

const state = init_state.state.toLowerCase()
const disabled = (name == "pc")?state:false
---
<div class="container" >
    <img src={`/media/${name}-${state}.png`}>
    <h1>{name}</h1>
    <label class="switch">
        <input  class={`check_in ${(state == "on")?"on":"off"}`} type="checkbox" checked={(state == "on")} 
                disabled={disabled} data-url={device_url} data-name={name}
        >
        <span class="slider"></span>
    </label>
</div>


<style>
    /* https://www.w3schools.com/howto/howto_css_switch.asp */
h1{
    padding-left:10px;
}
img{
    max-height:12vh;
}

.switch {
  margin:10px;
  margin-top:0px;
  position: relative;
  display: inline-block;
  width: 60px;
  height: 34px;
  -webkit-tap-highlight-color: transparent;
}

.switch input{
  display: none;
}

.slider {
  position: absolute;
  cursor: pointer;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background-color: #ccc;
  -webkit-transition: .4s;
  transition: .4s;
  border-radius: 34px;
}

.slider:before {
  position: absolute;
  content: "";
  height: 26px;
  width: 26px;
  left: 4px;
  bottom: 4px;
  background-color: rgb(112, 112, 112);
  -webkit-transition: .4s;
  transition: .4s;
  border-radius: 50%;
}

input:checked + .slider:before {
  -webkit-transform: translateX(26px);
  -ms-transform: translateX(26px);
  transform: translateX(26px);
}

input.on + .slider {
  background-color: #f3d542;
}

input:disabled.on + .slider{
  background-color: #f3ac42;
  cursor: not-allowed;
  opacity: 0.5;
}

.slider:hover::before{
  background-color: rgb(63, 63, 63);

}

</style>

<script>
  console.log(" => switch_panel.astro script")
  
  function setCardState(name,input_el,state){
    if(state == "on"){
      input_el.classList.add("on")
      input_el.classList.remove("off")
    }else{
      input_el.classList.add("off")
      input_el.classList.remove("on")
    }
    const img = input_el.parentElement.parentElement.querySelector("img")
    img.src = `/media/${name}-${state}.png`
  }

  async function async_put(url, data) {
    const response = await fetch(url, {
      method: 'PUT',
      headers: {
        'Content-type': 'application/json'
      },
      body: JSON.stringify(data)
    })

    return await response.json()
  }
  async function async_get(url){
    const response = await fetch(url)
    return await response.json()
  }

  function put(name,state,element){
    console.log(`   * put() '${name}' at '${state}'`)
    const device_url = element.getAttribute("data-url")
    async_put(device_url,{state}).then((resp)=>{
      console.log(resp)
            setCardState(name,element,resp.state.toLowerCase())
          });
  }

  function get(name,element){
    const device_url = element.getAttribute("data-url")
    async_get(device_url).then((resp)=>{
      setCardState(name,element,resp.state.toLowerCase())
    })
  }

  const input_elements = document.querySelectorAll(".check_in")
    const inputs = [...input_elements]
    for(let input in inputs){
      const element = inputs[input]
      const name = element.getAttribute("data-name")
        console.log(` * init for '${name}'`)
        element.onchange = (e)=>{
          const device_name = e.target.getAttribute("data-name")
          const state = e.target.checked?"on":"off"
          put(device_name,state,e.target)
        }
        //on page reload the dev server reinitializes MQTT and states update asynchronously right after
        setTimeout(()=>{
          get(name,element)
        },500)
    }

</script>
