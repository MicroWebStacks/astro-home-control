---
import {get_device} from '@/libs/heat_state'
import Svg from '@/components/svgicons.astro'
import CircularProgress from './circular_progress.astro';
import SliderInfo from './slider_info.astro'
export interface Props {
    name: string;
}

const { name } = Astro.props as Props;

const device = get_device(name)

const temperature = device.ambient.temperature
const temperature_text = temperature?`${temperature.toFixed(1)}Â°`:""
const target = device.heater.data.current_heating_setpoint
const metal = device.metal.data.temperature
const humidity = device.ambient.humidity?Math.round(device.ambient.humidity)+"%":""
const time = device.heater.last_seen_mn?device.heater.last_seen_mn:""
const valve_percent = device.heater.data.pi_heating_demand?device.heater.data.pi_heating_demand:0

console.log(` => from heat_slider ${name} : temperature = ${temperature}`)
---
<div class="panel" data-name={name}>
    <object data={`/media/${name}.svg`} />
    <div class="sensor humidity">
      <Svg filename="drop" />
      <span class="humidity value">{humidity}</span>
    </div>
    <div class="sensor temperature">
      <Svg filename="temperature" />
      <span class="temperature value">{temperature_text}</span>
    </div>
    <div class="slider" >
      <SliderInfo cursor={target} target={target} room={temperature} metal={metal}/>
    </div>
    <div class="valve">
      <CircularProgress percent={valve_percent}/>
    </div>
    <div class="signal">
      <Svg filename="signal" />
      <span class="signal value">{time}</span>
    </div>
</div>

<style>

.panel{
  display: flex;
  flex-direction: column;
  align-items: center;
  width:150px;
  max-width:20vw;
  padding-top: 0px;
}

object{
  max-width:70px;
}

.sensor{
  width:150px;
  height:50px;
  display: flex;
  justify-content: center;
  align-items: center;
  padding: 0px;
}
.value{
  width: 64px;
  font-size:1.5em;
}
.humidity.value{
  color:rgb(178, 220, 249);
}
.temperature.value{
  color:#f7e9e9;
}
.sensor.humidity :global(svg){
  width: 18px;
  padding-right: 10px;
}
.sensor.temperature :global(svg){
  fill: #f7e9e9;
  height: 52px;
}
.slider{
  background-color:#BDC0BE;
  height:400px;
  width:150px;
  padding:0px;
  border-radius: 5px;
}

.valve{
  width:150px;
  height:60px;
  display:flex;
  justify-content: center;
  padding-bottom: 0px;
}
.signal{
  width:150px;
  height:30px;
  display: flex;
  justify-content: center;
  align-items: center;
  padding: 0px;
}
.signal.value{
  width: 48px;
  margin-left:10px;
  padding-top: 3px;
  color: rgb(208, 205, 165);
  font-size:medium;
}

div{
  color: black;
  padding:10px;
}
.valve :global(svg){
  width:48px;
}
</style>


<script>
	import {event} from "../libs/client_utils"
  function panel_set_state(name,device){
    //console.log(`panel_set_state(${name})`)
    const panel = document.querySelector(`.panel[data-name="${name}"]`)
    if(device.ambient.temperature){
      const slider = panel.querySelector(".slider")
      event(slider,'slider',{
        room:device.ambient.temperature
      })
    }
    if(device.ambient.humidity){
      panel.querySelector(".humidity.value").textContent = Math.round(device.ambient.humidity)+"%"
    }
    if(device.heater){
      panel.querySelector(".signal.value").textContent = device.heater.last_seen_mn
      const valve = panel.querySelector(".valve.range")
      event(valve,'range',device.heater.data.pi_heating_demand)
      const slider = panel.querySelector(".slider")
      event(slider,'slider',{
        target:device.heater.data.current_heating_setpoint
      })
    }
    if(device.metal){
      const slider = panel.querySelector(".slider")
      event(slider,'slider',{
        metal:device.metal.data.temperature
      })
    }
  }


const panels_elements = document.querySelectorAll(".panel")
  const panels = [...panels_elements]
  for(let panel in panels){
    const element = panels[panel]
    const name = element.getAttribute("data-name")
    element.addEventListener("update",(event)=>{
      panel_set_state(name,event.detail)
    })
  }

</script>
